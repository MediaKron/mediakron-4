{"version":3,"file":"index.cjs.js","sources":["../src/minify-utils.js","../src/minify.js","../src/label.js"],"sourcesContent":["// @flow\n// babel-plugin-styled-components\n// https://github.com/styled-components/babel-plugin-styled-components/blob/8d44acc36f067d60d4e09f9c22ff89695bc332d2/src/minify/index.js\n\nconst multilineCommentRegex = /\\/\\*[^!](.|[\\r\\n])*?\\*\\//g\nconst lineCommentStart = /\\/\\//g\nconst symbolRegex = /(\\s*[;:{},]\\s*)/g\n\n// Counts occurences of substr inside str\nconst countOccurences = (str, substr) => str.split(substr).length - 1\n\n// Joins substrings until predicate returns true\nconst reduceSubstr = (substrs, join, predicate) => {\n  const length = substrs.length\n  let res = substrs[0]\n\n  if (length === 1) {\n    return res\n  }\n\n  for (let i = 1; i < length; i++) {\n    if (predicate(res)) {\n      break\n    }\n\n    res += join + substrs[i]\n  }\n\n  return res\n}\n\n// Joins at comment starts when it's inside a string or parantheses\n// effectively removing line comments\nexport const stripLineComment = (line: string) =>\n  reduceSubstr(\n    line.split(lineCommentStart),\n    '//',\n    str =>\n      !str.endsWith(':') && // NOTE: This is another guard against urls, if they're not inside strings or parantheses.\n      countOccurences(str, \"'\") % 2 === 0 &&\n      countOccurences(str, '\"') % 2 === 0 &&\n      countOccurences(str, '(') === countOccurences(str, ')')\n  )\n\nexport const compressSymbols = (code: string) =>\n  code.split(symbolRegex).reduce((str, fragment, index) => {\n    // Even-indices are non-symbol fragments\n    if (index % 2 === 0) {\n      return str + fragment\n    }\n\n    // Only manipulate symbols outside of strings\n    if (\n      countOccurences(str, \"'\") % 2 === 0 &&\n      countOccurences(str, '\"') % 2 === 0\n    ) {\n      return str + fragment.trim()\n    }\n\n    return str + fragment\n  }, '')\n\n// Detects lines that are exclusively line comments\nconst isLineComment = line => line.trim().startsWith('//')\nconst linebreakRegex = /[\\r\\n]\\s*/g\n\nexport const minify = (code: string) => {\n  const newCode = code\n    .replace(multilineCommentRegex, '\\n') // Remove multiline comments\n    .split(linebreakRegex) // Split at newlines\n    .filter(line => line.length > 0 && !isLineComment(line)) // Removes lines containing only line comments\n    .map(stripLineComment) // Remove line comments inside text\n    .join(' ') // Rejoin all lines\n\n  return compressSymbols(newCode)\n}\n","// @flow\nimport { minify } from './minify-utils'\n\nexport function getExpressionsFromTemplateLiteral(node: *, t: *): Array<*> {\n  const raw = createRawStringFromTemplateLiteral(node)\n  const minified = minify(raw)\n  return replacePlaceholdersWithExpressions(minified, node.expressions || [], t)\n}\n\nconst interleave = (strings: Array<*>, interpolations: Array<*>) =>\n  interpolations.reduce(\n    (array, interp, i) => array.concat([interp], strings[i + 1]),\n    [strings[0]]\n  )\n\nfunction getDynamicMatches(str: string) {\n  const re = /xxx(\\d+)xxx/gm\n  let match\n  const matches = []\n  while ((match = re.exec(str)) !== null) {\n    matches.push({\n      value: match[0],\n      p1: parseInt(match[1], 10),\n      index: match.index\n    })\n  }\n\n  return matches\n}\n\nfunction replacePlaceholdersWithExpressions(\n  str: string,\n  expressions: Array<*>,\n  t: *\n) {\n  const matches = getDynamicMatches(str)\n  if (matches.length === 0) {\n    if (str === '') {\n      return []\n    }\n    return [t.stringLiteral(str)]\n  }\n  const strings = []\n  const finalExpressions = []\n  let cursor = 0\n\n  matches.forEach(({ value, p1, index }, i) => {\n    const preMatch = str.substring(cursor, index)\n    cursor = cursor + preMatch.length + value.length\n    if (preMatch) {\n      strings.push(t.stringLiteral(preMatch))\n    } else if (i === 0) {\n      strings.push(t.stringLiteral(''))\n    }\n\n    finalExpressions.push(expressions[p1])\n    if (i === matches.length - 1) {\n      strings.push(t.stringLiteral(str.substring(index + value.length)))\n    }\n  })\n\n  return interleave(strings, finalExpressions).filter(\n    // $FlowFixMe\n    (node: StringLiteral) => {\n      return node.value !== ''\n    }\n  )\n}\n\nfunction createRawStringFromTemplateLiteral(quasi: {\n  quasis: Array<{ value: { cooked: string } }>\n}) {\n  let strs = quasi.quasis.map(x => x.value.cooked)\n\n  const src = strs\n    .reduce((arr, str, i) => {\n      arr.push(str)\n      if (i !== strs.length - 1) {\n        arr.push(`xxx${i}xxx`)\n      }\n      return arr\n    }, [])\n    .join('')\n    .trim()\n  return src\n}\n","// @flow\nexport function getLabelFromPath(path: *, t: *) {\n  return getIdentifierName(path, t)\n}\n\nfunction getDeclaratorName(path, t) {\n  // $FlowFixMe\n  const parent = path.findParent(p => p.isVariableDeclarator())\n  return parent && t.isIdentifier(parent.node.id) ? parent.node.id.name : ''\n}\n\nfunction getIdentifierName(path, t) {\n  let classParent\n  if (path) {\n    // $FlowFixMe\n    classParent = path.findParent(p => t.isClass(p))\n  }\n  if (classParent && classParent.node.id) {\n    return t.isIdentifier(classParent.node.id) ? classParent.node.id.name : ''\n  } else if (\n    classParent &&\n    classParent.node.superClass &&\n    classParent.node.superClass.name\n  ) {\n    return `${getDeclaratorName(path, t)}(${classParent.node.superClass.name})`\n  }\n\n  return getDeclaratorName(path, t)\n}\n"],"names":["multilineCommentRegex","lineCommentStart","symbolRegex","countOccurences","str","substr","split","length","reduceSubstr","substrs","join","predicate","res","i","stripLineComment","line","endsWith","compressSymbols","code","reduce","fragment","index","trim","isLineComment","startsWith","linebreakRegex","minify","newCode","replace","filter","map","getExpressionsFromTemplateLiteral","node","t","raw","createRawStringFromTemplateLiteral","minified","replacePlaceholdersWithExpressions","expressions","interleave","strings","interpolations","array","interp","concat","getDynamicMatches","re","match","matches","exec","push","parseInt","stringLiteral","finalExpressions","cursor","forEach","value","p1","preMatch","substring","quasi","strs","quasis","x","cooked","src","arr","getLabelFromPath","path","getIdentifierName","getDeclaratorName","parent","findParent","p","isVariableDeclarator","isIdentifier","id","name","classParent","isClass","superClass"],"mappings":"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"}